import React, { useState } from 'react';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import Footer from '../common/Footer';

const useStyles = mergeStyleSets({
  root: {
    backgroundColor: '#fff',
    color: '#333',
  },
  hero: {
    background: 'linear-gradient(135deg, #2e7d32, #4caf50)',
    color: '#fff',
    padding: '80px 20px',
    textAlign: 'center',
  },
  heroTitle: {
    fontSize: 48,
    fontWeight: 800,
    marginBottom: 20,
  },
  heroSubtitle: {
    fontSize: 24,
    fontWeight: 300,
    maxWidth: 800,
    margin: '0 auto',
  },
  section: {
    padding: '80px 20px',
  },
  sectionTitle: {
    fontSize: 36,
    fontWeight: 700,
    marginBottom: 20,
    color: '#c62828',
    textAlign: 'center',
  },
  sectionSubtitle: {
    fontSize: 18,
    color: '#666',
    marginBottom: 60,
    maxWidth: 800,
    margin: '0 auto 60px auto',
    textAlign: 'center',
  },
  blogContainer: {
    maxWidth: 1200,
    margin: '0 auto',
  },
  blogFilters: {
    display: 'flex',
    justifyContent: 'center',
    marginBottom: 50,
    gap: 15,
    flexWrap: 'wrap',
  },
  filterButton: {
    padding: '10px 20px',
    backgroundColor: '#f5f5f5',
    border: 'none',
    borderRadius: 20,
    cursor: 'pointer',
    fontSize: 14,
    fontWeight: 500,
    transition: 'all 0.3s ease',
    ':hover': {
      backgroundColor: '#e0e0e0',
    },
  },
  activeFilter: {
    backgroundColor: '#c62828',
    color: '#fff',
    ':hover': {
      backgroundColor: '#a01f1f',
    },
  },
  blogGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
    gap: 30,
  },
  blogCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    boxShadow: '0 8px 24px rgba(0,0,0,0.1)',
    overflow: 'hidden',
    transition: 'transform 0.3s ease, box-shadow 0.3s ease',
    ':hover': {
      transform: 'translateY(-5px)',
      boxShadow: '0 16px 32px rgba(0,0,0,0.15)',
    },
  },
  blogImage: {
    width: '100%',
    height: 200,
    background: 'linear-gradient(45deg, #ff6b35, #ff9a56)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: 48,
    color: '#fff',
  },
  blogContent: {
    padding: 24,
  },
  blogCategory: {
    display: 'inline-block',
    padding: '4px 12px',
    backgroundColor: '#e3f2fd',
    color: '#1976d2',
    borderRadius: 12,
    fontSize: 12,
    fontWeight: 600,
    marginBottom: 12,
  },
  blogTitle: {
    fontSize: 20,
    fontWeight: 600,
    marginBottom: 12,
    color: '#333',
    lineHeight: 1.4,
  },
  blogExcerpt: {
    fontSize: 14,
    color: '#666',
    lineHeight: 24,
    marginBottom: 16,
  },
  blogMeta: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    fontSize: 12,
    color: '#999',
  },
  readMoreBtn: {
    color: '#c62828',
    textDecoration: 'none',
    fontWeight: 500,
    fontSize: 14,
    ':hover': {
      textDecoration: 'underline',
    },
  },
  featuredSection: {
    backgroundColor: '#f8f9fa',
  },
  featuredGrid: {
    display: 'grid',
    gridTemplateColumns: '2fr 1fr',
    gap: 40,
    maxWidth: 1200,
    margin: '0 auto',
    '@media (max-width: 768px)': {
      gridTemplateColumns: '1fr',
    },
  },
  featuredPost: {
    backgroundColor: '#fff',
    borderRadius: 16,
    boxShadow: '0 8px 24px rgba(0,0,0,0.1)',
    overflow: 'hidden',
  },
  featuredImage: {
    width: '100%',
    height: 250,
    background: 'linear-gradient(45deg, #c62828, #e57373)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: 64,
    color: '#fff',
  },
  featuredContent: {
    padding: 30,
  },
  featuredTitle: {
    fontSize: 28,
    fontWeight: 700,
    marginBottom: 15,
    color: '#333',
  },
  featuredExcerpt: {
    fontSize: 16,
    color: '#666',
    lineHeight: 1.6,
    marginBottom: 20,
  },
  sidebar: {
    display: 'flex',
    flexDirection: 'column',
    gap: 30,
  },
  sidebarCard: {
    backgroundColor: '#fff',
    padding: 24,
    borderRadius: 16,
    boxShadow: '0 4px 16px rgba(0,0,0,0.05)',
  },
  sidebarTitle: {
    fontSize: 18,
    fontWeight: 600,
    marginBottom: 15,
    color: '#333',
  },
  recentPostsList: {
    display: 'flex',
    flexDirection: 'column',
    gap: 15,
  },
  recentPost: {
    display: 'flex',
    gap: 12,
    alignItems: 'flex-start',
  },
  recentPostImage: {
    width: 60,
    height: 60,
    borderRadius: 8,
    background: 'linear-gradient(45deg, #4caf50, #81c784)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: 20,
    color: '#fff',
    flexShrink: 0,
  },
  recentPostContent: {
    flex: 1,
  },
  recentPostTitle: {
    fontSize: 14,
    fontWeight: 500,
    color: '#333',
    marginBottom: 4,
    lineHeight: 1.3,
  },
  recentPostDate: {
    fontSize: 12,
    color: '#999',
    lineHeight: 38,
  },
});

interface BlogPost {
  id: number;
  title: string;
  excerpt: string;
  category: string;
  date: string;
  author: string;
  icon: string;
  featured?: boolean;
}

const Blog: React.FC = () => {
  const classes = useStyles;
  const [activeFilter, setActiveFilter] = useState<string>('all');

  const blogPosts: BlogPost[] = [
    {
      id: 1,
      title: '‡§ó‡§£‡•á‡§∂‡•ã‡§§‡•ç‡§∏‡§µ 2025 ‡§ö‡•ç‡§Ø‡§æ ‡§§‡§Ø‡§æ‡§∞‡•Ä‡§≤‡§æ ‡§∏‡•Å‡§∞‡•Å‡§µ‡§æ‡§§',
      excerpt: '‡§Ø‡§æ‡§µ‡§∞‡•ç‡§∑‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§ó‡§£‡•á‡§∂‡•ã‡§§‡•ç‡§∏‡§µ‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§®‡§µ‡•Ä‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ü‡§£‡§ø ‡§â‡§™‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ö‡•Ä ‡§§‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•ã‡§§. ‡§á‡§ï‡•ã-‡§´‡•ç‡§∞‡•á‡§Ç‡§°‡§≤‡•Ä ‡§â‡§§‡•ç‡§∏‡§µ‡§æ‡§≤‡§æ ‡§™‡•ç‡§∞‡§æ‡§ß‡§æ‡§®‡•ç‡§Ø ‡§¶‡•á‡§§ ‡§Ü‡§π‡•ã‡§§.',
      category: '‡§â‡§§‡•ç‡§∏‡§µ',
      date: '10 ‡§ë‡§ó‡§∏‡•ç‡§ü 2025',
      author: '‡§∞‡§æ‡§π‡•Å‡§≤ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      icon: 'üé™',
      featured: true,
    },
    {
      id: 2,
      title: '‡§µ‡•É‡§ï‡•ç‡§∑‡§æ‡§∞‡•ã‡§™‡§£ ‡§Æ‡•ã‡§π‡•Ä‡§Æ: 500 ‡§ù‡§æ‡§°‡§æ‡§Ç‡§ö‡•á ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø',
      excerpt: '‡§Ø‡§æ ‡§µ‡§∞‡•ç‡§∑‡•Ä ‡§Ü‡§Æ‡•ç‡§π‡•Ä 500 ‡§ù‡§æ‡§°‡•á ‡§≤‡§æ‡§µ‡§£‡•ç‡§Ø‡§æ‡§ö‡•á ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§†‡•á‡§µ‡§≤‡•á ‡§Ü‡§π‡•á. ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•á ‡§π‡•á ‡§∂‡§ï‡•ç‡§Ø ‡§π‡•ã‡§à‡§≤.',
      category: '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£',
      date: '5 ‡§ë‡§ó‡§∏‡•ç‡§ü 2025',
      author: '‡§Æ‡•Ä‡§∞‡§æ ‡§∞‡•á‡§°‡•ç‡§°‡•Ä',
      icon: 'üå±',
    },
    {
      id: 3,
      title: '‡§Ø‡•Å‡§µ‡§æ ‡§∏‡§π‡§≠‡§æ‡§ó‡§æ‡§∏‡§æ‡§†‡•Ä ‡§®‡§µ‡•Ä‡§® ‡§â‡§™‡§ï‡•ç‡§∞‡§Æ',
      excerpt: '‡§§‡§∞‡•Å‡§£‡§æ‡§Ç‡§®‡§æ ‡§Æ‡§Ç‡§°‡§≥‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§Æ‡§æ‡§§ ‡§∏‡§π‡§≠‡§æ‡§ó‡•Ä ‡§ï‡§∞‡•Ç‡§® ‡§ò‡•á‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß ‡§∏‡•ç‡§™‡§∞‡•ç‡§ß‡§æ ‡§Ü‡§£‡§ø ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∂‡§æ‡§≥‡§æ ‡§Ü‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•ã‡§§.',
      category: '‡§Ø‡•Å‡§µ‡§æ',
      date: '28 ‡§ú‡•Å‡§≤‡•à 2025',
      author: '‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§™‡§æ‡§ü‡•Ä‡§≤',
      icon: 'üë•',
    },
    {
      id: 4,
      title: '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§¶‡§ø‡§∂‡•á‡§®‡•á ‡§Ü‡§Æ‡§ö‡•Ä ‡§™‡§æ‡§µ‡§≤‡•á',
      excerpt: '‡§Æ‡§Ç‡§°‡§≥‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ ‡§ï‡§æ‡§Æ‡§ï‡§æ‡§ú‡§æ‡§§ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§§‡§Ç‡§§‡•ç‡§∞‡§ú‡•ç‡§û‡§æ‡§®‡§æ‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§¨‡§®‡§§ ‡§Ü‡§π‡•ã‡§§.',
      category: '‡§§‡§Ç‡§§‡•ç‡§∞‡§ú‡•ç‡§û‡§æ‡§®',
      date: '20 ‡§ú‡•Å‡§≤‡•à 2025',
      author: '‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ú‡•ã‡§∂‡•Ä',
      icon: 'üíª',
    },
    {
      id: 5,
      title: '‡§∏‡§æ‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§∏‡•á‡§µ‡•á‡§ö‡•á ‡§Æ‡§π‡§§‡•ç‡§µ',
      excerpt: '‡§∏‡§Æ‡§æ‡§ú‡§∏‡•á‡§µ‡§æ ‡§π‡•á ‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§Ç‡§°‡§≥‡§æ‡§ö‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§â‡§¶‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§Ü‡§π‡•á. ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§µ‡§ø‡§µ‡§ø‡§ß ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§π‡§≠‡§æ‡§ó‡•Ä ‡§π‡•ã‡§§‡•ã.',
      category: '‡§∏‡§Æ‡§æ‡§ú‡§∏‡•á‡§µ‡§æ',
      date: '15 ‡§ú‡•Å‡§≤‡•à 2025',
      author: '‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§∏‡§æ‡§à',
      icon: 'ü§ù',
    },
    {
      id: 6,
      title: '‡§ó‡§£‡•á‡§∂‡•ã‡§§‡•ç‡§∏‡§µ 2024 ‡§ö‡•á ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä ‡§∏‡§Æ‡§æ‡§∞‡•ã‡§™',
      excerpt: '‡§Æ‡§æ‡§ó‡•Ä‡§≤ ‡§µ‡§∞‡•ç‡§∑‡•Ä‡§ö‡§æ ‡§ó‡§£‡•á‡§∂‡•ã‡§§‡•ç‡§∏‡§µ ‡§Ö‡§§‡•ç‡§Ø‡§Ç‡§§ ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä ‡§†‡§∞‡§≤‡§æ. 50,000 ‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§≠‡§ï‡•ç‡§§‡§æ‡§Ç‡§®‡•Ä ‡§∏‡§π‡§≠‡§æ‡§ó ‡§ò‡•á‡§§‡§≤‡§æ.',
      category: '‡§â‡§§‡•ç‡§∏‡§µ',
      date: '10 ‡§ú‡•Å‡§≤‡•à 2025',
      author: '‡§Ö‡§Æ‡§ø‡§§ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
      icon: 'üéâ',
    },
  ];

  const categories = ['all', '‡§â‡§§‡•ç‡§∏‡§µ', '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£', '‡§Ø‡•Å‡§µ‡§æ', '‡§§‡§Ç‡§§‡•ç‡§∞‡§ú‡•ç‡§û‡§æ‡§®', '‡§∏‡§Æ‡§æ‡§ú‡§∏‡•á‡§µ‡§æ'];

  const filteredPosts = activeFilter === 'all' 
    ? blogPosts.filter(post => !post.featured)
    : blogPosts.filter(post => post.category === activeFilter && !post.featured);

  const featuredPost = blogPosts.find(post => post.featured);

  const recentPosts = blogPosts.slice(0, 4);

  const getCategoryColor = (category: string) => {
    const colors: { [key: string]: string } = {
      '‡§â‡§§‡•ç‡§∏‡§µ': '#ff6b35',
      '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£': '#4caf50',
      '‡§Ø‡•Å‡§µ‡§æ': '#2196f3',
      '‡§§‡§Ç‡§§‡•ç‡§∞‡§ú‡•ç‡§û‡§æ‡§®': '#9c27b0',
      '‡§∏‡§Æ‡§æ‡§ú‡§∏‡•á‡§µ‡§æ': '#ff9800',
    };
    return colors[category] || '#1976d2';
  };

  return (
    <>
      <div className={classes.root}>
        <div className={classes.hero}>
          <h1 className={classes.heroTitle}>‡§¨‡§æ‡§§‡§Æ‡•ç‡§Ø‡§æ ‡§Ü‡§£‡§ø ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏</h1>
          <p className={classes.heroSubtitle}>
            ‡§Æ‡§Ç‡§°‡§≥‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§¨‡§æ‡§§‡§Æ‡•ç‡§Ø‡§æ, ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§Ü‡§£‡§ø ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§â‡§™‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä
          </p>
        </div>

        {featuredPost && (
          <div className={`${classes.section} ${classes.featuredSection}`}>
            <h2 className={classes.sectionTitle}>‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§æ‡§§‡§Æ‡•Ä</h2>
            <div className={classes.featuredGrid}>
              <div className={classes.featuredPost}>
                <div className={classes.featuredImage}>
                  {featuredPost.icon}
                </div>
                <div className={classes.featuredContent}>
                  <span 
                    className={classes.blogCategory}
                    style={{ backgroundColor: `${getCategoryColor(featuredPost.category)}20`, color: getCategoryColor(featuredPost.category) }}
                  >
                    {featuredPost.category}
                  </span>
                  <h3 className={classes.featuredTitle}>{featuredPost.title}</h3>
                  <p className={classes.featuredExcerpt}>{featuredPost.excerpt}</p>
                  <div className={classes.blogMeta}>
                    <span>‡§≤‡•á‡§ñ‡§ï: {featuredPost.author}</span>
                    <span>{featuredPost.date}</span>
                  </div>
                </div>
              </div>

              <div className={classes.sidebar}>
                <div className={classes.sidebarCard}>
                  <h3 className={classes.sidebarTitle}>‡§Ö‡§≤‡•Ä‡§ï‡§°‡•Ä‡§≤ ‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏</h3>
                  <div className={classes.recentPostsList}>
                    {recentPosts.map((post) => (
                      <div key={post.id} className={classes.recentPost}>
                        <div className={classes.recentPostImage}>
                          {post.icon}
                        </div>
                        <div className={classes.recentPostContent}>
                          <div className={classes.recentPostTitle}>{post.title}</div>
                          <div className={classes.recentPostDate}>{post.date}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div className={classes.section}>
          <h2 className={classes.sectionTitle}>‡§∏‡§∞‡•ç‡§µ ‡§¨‡§æ‡§§‡§Æ‡•ç‡§Ø‡§æ</h2>
          <div className={classes.blogContainer}>
            <div className={classes.blogFilters}>
              {categories.map((category) => (
                <button
                  key={category}
                  className={`${classes.filterButton} ${activeFilter === category ? classes.activeFilter : ''}`}
                  onClick={() => setActiveFilter(category)}
                >
                  {category === 'all' ? '‡§∏‡§∞‡•ç‡§µ' : category}
                </button>
              ))}
            </div>

            <div className={classes.blogGrid}>
              {filteredPosts.map((post) => (
                <article key={post.id} className={classes.blogCard}>
                  <div className={classes.blogImage}>
                    {post.icon}
                  </div>
                  <div className={classes.blogContent}>
                    <span 
                      className={classes.blogCategory}
                      style={{ backgroundColor: `${getCategoryColor(post.category)}20`, color: getCategoryColor(post.category) }}
                    >
                      {post.category}
                    </span>
                    <h3 className={classes.blogTitle}>{post.title}</h3>
                    <p className={classes.blogExcerpt}>{post.excerpt}</p>
                    <div className={classes.blogMeta}>
                      <div>
                        <div>‡§≤‡•á‡§ñ‡§ï: {post.author}</div>
                        <div>{post.date}</div>
                      </div>
                      <a href="#" className={classes.readMoreBtn}>‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§æ‡§ö‡§æ</a>
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </div>
        </div>
      </div>

      <Footer />
    </>
  );
};

export default Blog;
